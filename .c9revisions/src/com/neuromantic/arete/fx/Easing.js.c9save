{"ts":1366600388043,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n *\n * Easing.js\n * com.neuromantic.arete.fx.Easing\n *\n * https://github.com/neuromantic/CodeJS/\n *\n * Copyright 2011, Neuromantic Industries & For Sure, Rad!\n * Licensed under the MIT license.\n *\n */\n\t/*\n\t  Easing Equations v1.5 // all equations use this signature  t: current time, b: beginning value, c: change in value, d: duration\n\t  May 1, 2003\n\t  (c) 2003 Robert Penner, all rights reserved. \n\t  This work is subject to the terms in http://www.robertpenner.com/easing_terms_of_use.html.  \n\t  \n\t  These tweening functions provide different flavors of \n\t  math-based motion under a consistent API. \n\t  \n\t  Types of easing:\n\t  \n\t\t  Linear\n\t\t  Quadratic\n\t\t  Cubic\n\t\t  Quartic\n\t\t  Quintic\n\t\t  Sinusoidal\n\t\t  Exponential\n\t\t  Circular\n\t\t  Elastic\n\t\t  Back\n\t\t  Bounce\n\t\n\t  Changes:\n\t  1.5 - added bounce easing\n\t  1.4 - added elastic and back easing\n\t  1.3 - tweaked the exponential easing functions to make endpoints exact\n\t  1.2 - inline optimizations (changing t and multiplying in one step)--thanks to Tatsuo Kato for the idea\n\t  \n\t  Discussed in Chapter 7 of \n\t  Robert Penner's Programming Macromedia Flash MX\n\t  (including graphs of the easing equations)\n\t  \n\t  http://www.robertpenner.com/profmx\n\t  http://www.amazon.com/exec/obidos/ASIN/0072223561/robertpennerc-20\n\t*/\n_package( 'com.neuromantic.arete.fx',\n\n\t_class ('Easing', {\n\t// Ported to Code.js 5 / 13 / 2011 by Neuromantic\n\t\n\t\t// simple linear tweening - no easing\n\t\t// t: current time, b: beginning value, c: change in value, d: duration\n\t\tstatic_linearTween : function (t, b, c, d) {\n\t\t\treturn c*t/d + b;\n\t\t},\n\t\t\n\t\t\n\t\t ///////////// QUADRATIC EASING: t^2 ///////////////////\n\t\t\n\t\t// quadratic easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in value, d: duration\n\t\t// t and d can be in frames or seconds/milliseconds\n\t\tstatic_easeInQuad : function (t, b, c, d) {\n\t\t\treturn c*(t/=d)*t + b;\n\t\t},\n\t\t\n\t\t// quadratic easing out - decelerating to zero velocity\n\t\tstatic_easeOutQuad : function (t, b, c, d) {\n\t\t\treturn -c *(t/=d)*(t-2) + b;\n\t\t},\n\t\t\n\t\t// quadratic easing in/out - acceleration until halfway, then deceleration\n\t\tstatic_easeInOutQuad : function (t, b, c, d) {\n\t\t\tif ((t/=d/2) < 1) return c/2*t*t + b;\n\t\t\treturn -c/2 * ((--t)*(t-2) - 1) + b;\n\t\t},\n\t\t\n\t\t\n\t\t ///////////// CUBIC EASING: t^3 ///////////////////////\n\t\t\n\t\t// cubic easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in value, d: duration\n\t\t// t and d can be frames or seconds/milliseconds\n\t\tstatic_easeInCubic : function (t, b, c, d) {\n\t\t\treturn c*(t/=d)*t*t + b;\n\t\t},\n\t\t\n\t\t// cubic easing out - decelerating to zero velocity\n\t\tstatic_easeOutCubic : function (t, b, c, d) {\n\t\t\treturn c*((t=t/d-1)*t*t + 1) + b;\n\t\t},\n\t\t\n\t\t// cubic easing in/out - acceleration until halfway, then deceleration\n\t\tstatic_easeInOutCubic : function (t, b, c, d) {\n\t\t\tif ((t/=d/2) < 1) return c/2*t*t*t + b;\n\t\t\treturn c/2*((t-=2)*t*t + 2) + b;\n\t\t},\n\t\t\n\t\t\n\t\t ///////////// QUARTIC EASING: t^4 /////////////////////\n\t\t\n\t\t// quartic easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in value, d: duration\n\t\t// t and d can be frames or seconds/milliseconds\n\t\tstatic_easeInQuart : function (t, b, c, d) {\n\t\t\treturn c*(t/=d)*t*t*t + b;\n\t\t},\n\t\t\n\t\t// quartic easing out - decelerating to zero velocity\n\t\tstatic_easeOutQuart : function (t, b, c, d) {\n\t\t\treturn -c * ((t=t/d-1)*t*t*t - 1) + b;\n\t\t},\n\t\t\n\t\t// quartic easing in/out - acceleration until halfway, then deceleration\n\t\tstatic_easeInOutQuart : function (t, b, c, d) {\n\t\t\tif ((t/=d/2) < 1) return c/2*t*t*t*t + b;\n\t\t\treturn -c/2 * ((t-=2)*t*t*t - 2) + b;\n\t\t},\n\t\t\n\t\t\n\t\t ///////////// QUINTIC EASING: t^5  ////////////////////\n\t\t\n\t\t// quintic easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in value, d: duration\n\t\t// t and d can be frames or seconds/milliseconds\n\t\tstatic_easeInQuint : function (t, b, c, d) {\n\t\t\treturn c*(t/=d)*t*t*t*t + b;\n\t\t},\n\t\t\n\t\t// quintic easing out - decelerating to zero velocity\n\t\tstatic_easeOutQuint : function (t, b, c, d) {\n\t\t\treturn c*((t=t/d-1)*t*t*t*t + 1) + b;\n\t\t},\n\t\t\n\t\t// quintic easing in/out - acceleration until halfway, then deceleration\n\t\tstatic_easeInOutQuint : function (t, b, c, d) {\n\t\t\tif ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;\n\t\t\treturn c/2*((t-=2)*t*t*t*t + 2) + b;\n\t\t},\n\t\t\n\t\t\n\t\t\n\t\t ///////////// SINUSOIDAL EASING: sin(t) ///////////////\n\t\t\n\t\t// sinusoidal easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in position, d: duration\n\t\tstatic_easeInSine : function (t, b, c, d) {\n\t\t\treturn -c * static_cos(t/d * (Math.PI/2)) + c + b;\n\t\t},\n\t\t\n\t\t// sinusoidal easing out - decelerating to zero velocity\n\t\tstatic_easeOutSine : function (t, b, c, d) {\n\t\t\treturn c * static_sin(t/d * (Math.PI/2)) + b;\n\t\t},\n\t\t\n\t\t// sinusoidal easing in/out - accelerating until halfway, then decelerating\n\t\tstatic_easeInOutSine : function (t, b, c, d) {\n\t\t\treturn -c/2 * (static_cos(Math.PI*t/d) - 1) + b;\n\t\t},\n\t\t\n\t\t\n\t\t ///////////// EXPONENTIAL EASING: 2^t /////////////////\n\t\t\n\t\t// exponential easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in position, d: duration\n\t\tstatic_easeInExpo : function (t, b, c, d) {\n\t\t\treturn (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;\n\t\t},\n\t\t\n\t\t// exponential easing out - decelerating to zero velocity\n\t\tstatic_easeOutExpo : function (t, b, c, d) {\n\t\t\treturn (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;\n\t\t},\n\t\t\n\t\t// exponential easing in/out - accelerating until halfway, then decelerating\n\t\tstatic_easeInOutExpo : function (t, b, c, d) {\n\t\t\tif (t==0) return b;\n\t\t\tif (t==d) return b+c;\n\t\t\tif ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;\n\t\t\treturn c/2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t\t},\n\t\t\n\t\t\n\t\t /////////// CIRCULAR EASING: sqrt(1-t^2) //////////////\n\t\t\n\t\t// circular easing in - accelerating from zero velocity\n\t\t// t: current time, b: beginning value, c: change in position, d: duration\n\t\tstatic_easeInCirc : function (t, b, c, d) {\n\t\t\treturn -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;\n\t\t},\n\t\t\n\t\t// circular easing out - decelerating to zero velocity\n\t\tstatic_easeOutCirc : function (t, b, c, d) {\n\t\t\treturn c * Math.sqrt(1 - (t=t/d-1)*t) + b;\n\t\t},\n\t\t\n\t\t// circular easing in/out - acceleration until halfway, then deceleration\n\t\tstatic_easeInOutCirc : function (t, b, c, d) {\n\t\t\tif ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;\n\t\t\treturn c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;\n\t\t},\n\t\t\n\t\t\n\t\t /////////// ELASTIC EASING: exponentially decaying sine wave  //////////////\n\t\t\n\t\t// t: current time, b: beginning value, c: change in value, d: duration, a: amplitude (optional), p: period (optional)\n\t\t// t and d can be in frames or seconds/milliseconds\n\t\t\n\t\tstatic_easeInElastic : function (t, b, c, d, a, p) {\n\t\t\tif (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;\n\t\t\tif (a < Math.abs(c)) { a=c; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (c/a);\n\t\t\treturn -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;\n\t\t},\n\t\t\n\t\tstatic_easeOutElastic : function (t, b, c, d, a, p) {\n\t\t\tif (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;\n\t\t\tif (a < Math.abs(c)) { a=c; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (c/a);\n\t\t\treturn a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;\n\t\t},\n\t\t\n\t\tstatic_easeInOutElastic : function (t, b, c, d, a, p) {\n\t\t\tif (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);\n\t\t\tif (a < Math.abs(c)) { a=c; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (c/a);\n\t\t\tif (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;\n\t\t\treturn a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;\n\t\t},\n\t\t\n\t\t\n\t\t /////////// BACK EASING: overshooting cubic easing: (s+1)*t^3 - s*t^2  //////////////\n\t\t\n\t\t// back easing in - backtracking slightly, then reversing direction and moving to target\n\t\t// t: current time, b: beginning value, c: change in value, d: duration, s: overshoot amount (optional)\n\t\t// t and d can be in frames or seconds/milliseconds\n\t\t// s controls the amount of overshoot: higher s means greater overshoot\n\t\t// s has a default value of 1.70158, which produces an overshoot of 10 percent\n\t\t// s==0 produces cubic easing with no overshoot\n\t\tstatic_easeInBack : function (t, b, c, d, s) {\n\t\t\tif (s == undefined) s = 1.70158;\n\t\t\treturn c*(t/=d)*t*((s+1)*t - s) + b;\n\t\t},\n\t\t\n\t\t// back easing out - moving towards target, overshooting it slightly, then reversing and coming back to target\n\t\tstatic_easeOutBack : function (t, b, c, d, s) {\n\t\t\tif (s == undefined) s = 1.70158;\n\t\t\treturn c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;\n\t\t},\n\t\t\n\t\t// back easing in/out - backtracking slightly, then reversing direction and moving to target,\n\t\t// then overshooting target, reversing, and finally coming back to target\n\t\tstatic_easeInOutBack : function (t, b, c, d, s) {\n\t\t\tif (s == undefined) s = 1.70158; \n\t\t\tif ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;\n\t\t\treturn c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;\n\t\t},\n\t\t\n\t\t\n\t\t /////////// BOUNCE EASING: exponentially decaying parabolic bounce  //////////////\n\t\t\n\t\t// bounce easing in\n\t\t// t: current time, b: beginning value, c: change in position, d: duration\n\t\tstatic_easeInBounce : function (t, b, c, d) {\n\t\t\treturn c - Easing.easeOutBounce (d-t, 0, c, d) + b;\n\t\t},\n\t\t\n\t\t// bounce easing out\n\t\tstatic_easeOutBounce : function (t, b, c, d) {\n\t\t\tif ((t/=d) < (1/2.75)) {\n\t\t\t\treturn c*(7.5625*t*t) + b;\n\t\t\t} else if (t < (2/2.75)) {\n\t\t\t\treturn c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;\n\t\t\t} else if (t < (2.5/2.75)) {\n\t\t\t\treturn c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;\n\t\t\t} else {\n\t\t\t\treturn c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// bounce easing in/out\n\t\tstatic_easeInOutBounce : function (t, b, c, d) {\n\t\t\tif (t < d/2) return Easing.easeInBounce (t*2, 0, c, d) * .5 + b;\n\t\t\treturn Easing.easeOutBounce (t*2-d, 0, c, d) * .5 + c*.5 + b;\n\t\t}//,\n\t})\n);"]],"start1":0,"start2":0,"length1":0,"length2":10059}]],"length":10059}
