{"ts":1357249778805,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n *\n * EventDispatcher.js\n * com.fasejs.events.EventDispatcher\n *\n * https://github.com/neuromantic/CodeJS/\n *\n * Copyright 2011, Neuromantic Industries & For Sure, Rad!\n * Licensed under the MIT license.\n *\n */\n _package( 'com.fasejs.events',\n \n \t_import('com.fasejs.util.Dictionary' ),\n \t\n\t_class('EventDispatcher', {\n\t\tEventDispatcher : function () {\n// _debug( 'new EventDispatcher' )\n\t\t\t// this._.eventClosures = new Dictionary();\n// _debug( 'EventDispatcher constructed.')\n\t\t},\n\t\tprivate_eventHandlers : {},\n\t\tprivate_eventClosures : null,\n\t\taddEventListener : function(eventType, eventHandler, scope) {\n\t\t\tthis._.eventHandlers[ eventType ] = this._.eventHandlers[ eventType ] || [];\n\t\t\t// scope = scope || this;\n\t\t\t// var closure = ( function( scope ) {\n\t\t\t\t // return function ( event ) {\n\t\t\t\t \t // eventHandler.apply( scope, [ event ] ); \n\t\t\t\t // }\n\t\t\t// } )( scope )\n\t\t\t// this._.eventClosures._(eventHandler, closure )\n\t\t\tthis._.eventHandlers[ eventType ].push( eventHandler );\n\t\t\t\n// _debug( this, this._.eventClosures);\n\t\t},\n\t\tremoveEventListener : function( eventType, eventHandler ) {\n\t\t\tif( this._.eventHandlers[ eventType ].length > 0 ) {//this._.eventClosures._(\n\t\t\t\tvar index = this._.eventHandlers[ eventType ].indexOf( eventHandler);// );\n\t\t\t\tif( index > -1 ) {\n\t\t\t\t\tthis._.eventHandlers[ eventType ].splice( index, 1 );\n\t\t\t\t\t// this._.eventClosures._( eventHandler, null );\n\t\t\t\t};\n\t\t\t};\n\t\t},\n\t\t_dispatchEvent : function( event ) {\n\t\t\tif( this._.eventHandlers[ event.type ] ) {\n\t\t\t\tevent.target = this;\n\t\t\t\tfor( index in this._.eventHandlers[ event.type ] ) {\n\t\t\t\t\t// this._.eventClosures._( \n\t\t\t\t\tthis._.eventHandlers[ event.type ][ index ]( event );\n\t\t\t\t};\n\t\t\t};\n\t\t}//,\n\t})\n);\n"]],"start1":0,"start2":0,"length1":0,"length2":1703}]],"length":1703}
