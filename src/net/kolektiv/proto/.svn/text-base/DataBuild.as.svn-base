package net.kolektiv.proto{	import br.com.stimuli.loading.BulkLoader;		import flash.display.Sprite;	import flash.events.Event;	import flash.utils.*;		import net.kolektiv.utils.Debug;	public class DataBuild extends Sprite{		protected var data:XML;		protected var loader:BulkLoader;		protected var data_loader:DataLoader = new DataLoader();		protected var _liquid:Boolean = true;		public var autostart:Boolean = true;		protected var onstage:Boolean = false;		protected var built:Boolean = false;		protected var initialized:Boolean = false;		// protected var wheel:LoadingWheel = new LoadingWheel(16,0x666666);		public var id:String = "unloaded";		public static const START:String = "start";		public static const FINISH:String = "finish";		public static const INIT:String = "init";		public static const BUILT:String = "built";		public static const LOADED:String = "loaded";				///////////////////// CONSTRUCTOR ////////////////////////////////////////////////////////////////////////////		public function DataBuild() {			Debug.info("new ",this);			loader = BulkLoader.getLoader("loader")  || new BulkLoader("loader");			data_loader.addEventListener(DataLoader.READY,assignData);			addEventListener(Event.ADDED_TO_STAGE,setup);		}		public function loadXML(url:String):void {			Debug.info(this,".loadXML(",url,")");			data_loader.loadXML(url);			return;		}		///// XML OBJECT /////		public function loadData(x:XML):void {			Debug.info(this,".loadData()");			data_loader.loadData(x);					}		protected function setup(e:Event = null):void{			Debug.info(this,".setup()");			onstage = true;			//if(wheel) makeWheel();			if(built) layout();		}		/*		protected function makeWheel():void{			addChild(wheel);			wheel.alpha = 0;			TweenLite.to(wheel,1,{autoAlpha:1});			wheel.blendMode = BlendMode.INVERT;			wheel.x = stage.stageWidth*.5;			wheel.y = stage.stageHeight*.5;		}		*/		///////////////////// ASSIGN DATA ///////////////////////////////////////////////////////////////////////////		protected function assignData(e:Event = null):void{			Debug.info(this,".assignData()");			data = data_loader.data;			parseData();		}		///////////////////// PARSE DATA ////////////////////////////////////////////////////////////////////////////		 protected function parseData():void{		 	id = data.attributes()[0].toString();			Debug.info(this,".parseData()");			loadAssets();		}		///////////////////// LOAD ASSETS ////////////////////////////////////////////////////////////////////////////		protected function loadAssets(e:Event=null):void {			Debug.info(this,".loadAssets()");			if(loader.itemsTotal>0 && loader.itemsLoaded!=loader.itemsTotal){				loader.addEventListener(Event.COMPLETE,exec);				loader.start();			}else exec();			return; 		}		protected function exec(e:Event = null):void{			Debug.info(this,".exec()");			//TweenLite.to(wheel,1,{autoAlpha:0});			parseAssets();			build();			addEvents();			if(onstage||!_liquid){				layout();			}			init();			if(autostart) start();			return;		}		///////////////////// PARSE ASSETS  ////////////////////////////////////////////////////////////////////////////		protected function parseAssets(e:Event=null):void {			Debug.info(this,".parseAssets()");			return;		}		///////////////////// BUILD ////////////////////////////////////////////////////////////////////////////		protected function build(e:Event=null):void{			Debug.info(this,".build()")			built = true;			dispatchEvent(new Event(BUILT))			return;		}		///////////////////// ADD EVENTS ////////////////////////////////////////////////////////////////////////////		protected function addEvents(e:Event=null):void{			Debug.info(this,".addEvents()")			if(_liquid) stage.addEventListener(Event.RESIZE,resize);			return;		}		protected function resize(e:Event = null):void {			Debug.info(this,".resize()");			layout();			return;		}		protected function enterFrame(e:Event = null):void {		}		///////////////////// INIT ////////////////////////////////////////////////////////////////////////////		protected function init(e:Event=null):void {			Debug.info(this,".init()");			initialized = true;			dispatchEvent(new Event(Event.INIT));			return;		}		protected function layout(e:Event=null):void{			Debug.info(this,".layout()");			return;		}		///////////////////// START ////////////////////////////////////////////////////////////////////////////		protected function start(e:Event=null):void{			Debug.info(this,".start()");			//addEventListener(Event.ENTER_FRAME,enterFrame);			dispatchEvent(new Event(START));			return		}		override public function toString():String{			return Debug.reflect(this,"id");		}	}}